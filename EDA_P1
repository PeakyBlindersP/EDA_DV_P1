import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# loading the breast cancer dataset from csv file to pandas data frame
breast_cancer_data = pd.read_csv('/content/data.csv')

# printing the first five rows of the dataframe
breast_cancer_data.head()

# removing the unnmaed column
breast_cancer_data.drop(columns='Unnamed: 32', axis = 1, inplace=True)

breast_cancer_data.head()

breast_cancer_data.shape

# checking the data types
breast_cancer_data.info()

# removing the id column
breast_cancer_data.drop(columns='id', axis=1, inplace=True)

# checking for missing values
breast_cancer_data.isnull().sum()

breast_cancer_data.describe()

breast_cancer_data['diagnosis'].value_counts()


# encoding the target column 
label_encode = LabelEncoder()

labels = label_encode.fit_transform(breast_cancer_data['diagnosis'])

breast_cancer_data['target'] = labels

breast_cancer_data.drop(columns='diagnosis', axis=1, inplace=True)

# diagnosis column removed
breast_cancer_data.head()

breast_cancer_data['target'].value_counts()

sns.countplot(x='target', data=breast_cancer_data)

breast_cancer_data.groupby('target').mean()

# countplot for the target column for checkin gthe distribution of target
sns.countplot(x='target', data=breast_cancer_data)

# this is how we can get all the column names of the dataframe
for column in breast_cancer_data:
  print(column)
  
  # creating a for loop to get the distribution plot for all columns
for column in breast_cancer_data:
  sns.displot(x=column, data=breast_cancer_data)
  
  sns.distplot(x=breast_cancer_data.radius_mean)
  
  # pair plot
#sns.pairplot(breast_cancer_data)
#plt.show()

# Select first column of the dataframe as a series
first_column = breast_cancer_data.iloc[:, 0]

# Select second column of the dataframe as a series
second_column = breast_cancer_data.iloc[:, 1]

print(first_column)
print('-----')
print(second_column)

# let's plot a scatter plot for 1st feature vs second feature
plt.scatter(x=first_column, y=second_column)


for column in breast_cancer_data:
    plt.figure()
    breast_cancer_data.boxplot([column])
    
    correlation_matrix = breast_cancer_data.corr()
    
 # constructing a heat map to visualize the correlation matrix
plt.figure(figsize=(20,20))
sns.heatmap(correlation_matrix, cbar=True, fmt='.1f', annot=True, cmap='Blues')
plt.savefig('Correlation Heat map')

